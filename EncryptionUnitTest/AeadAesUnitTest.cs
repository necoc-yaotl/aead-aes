using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Buffers.Binary;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using AeadAes;

namespace EncryptionUnitTest
{
    [TestClass]
    public class AeadAesUnitTest
    {
        private Dictionary<string, byte[]> _K;
        private Dictionary<string, byte[]> _P;
        private Dictionary<string, byte[]> _IV;
        private Dictionary<string, byte[]> _A;
        private Dictionary<string, byte[]> _C;
        private byte[] _additionalData;
        public AeadAesUnitTest()
        {
            _K = new Dictionary<string, byte[]>();
            _P = new Dictionary<string, byte[]>();
            _IV = new Dictionary<string, byte[]>();
            _A = new Dictionary<string, byte[]>();
            _C = new Dictionary<string, byte[]>();

            _K.Add("AEAD_AES_128_CBC_HMAC_SHA_256", new byte[] {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f
            });

            _P.Add("AEAD_AES_128_CBC_HMAC_SHA_256", new byte[] { 
                0x41, 0x20, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20,
                0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
                0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65,
                0x74, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62,
                0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x69,
                0x6e, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x66,
                0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f,
                0x75, 0x74, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65 
            });

            _IV.Add("AEAD_AES_128_CBC_HMAC_SHA_256", new byte[] { 
                0x1a, 0xf3, 0x8c, 0x2d, 0xc2, 0xb9, 0x6f, 0xfd, 0xd8, 0x66, 0x94, 0x09, 0x23, 0x41, 0xbc, 0x04 
            });

            _A.Add("AEAD_AES_128_CBC_HMAC_SHA_256", new byte[] {
                0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63,
                0x69, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x65, 0x20,
                0x4b, 0x65, 0x72, 0x63, 0x6b, 0x68, 0x6f, 0x66, 0x66, 0x73
            });

            _C.Add("AEAD_AES_128_CBC_HMAC_SHA_256", new byte[] {
                0x1a, 0xf3, 0x8c, 0x2d, 0xc2, 0xb9, 0x6f, 0xfd, 0xd8, 0x66, 0x94, 0x09, 0x23, 0x41, 0xbc, 0x04,
                0xc8, 0x0e, 0xdf, 0xa3, 0x2d, 0xdf, 0x39, 0xd5, 0xef, 0x00, 0xc0, 0xb4, 0x68, 0x83, 0x42, 0x79,
                0xa2, 0xe4, 0x6a, 0x1b, 0x80, 0x49, 0xf7, 0x92, 0xf7, 0x6b, 0xfe, 0x54, 0xb9, 0x03, 0xa9, 0xc9,
                0xa9, 0x4a, 0xc9, 0xb4, 0x7a, 0xd2, 0x65, 0x5c, 0x5f, 0x10, 0xf9, 0xae, 0xf7, 0x14, 0x27, 0xe2,
                0xfc, 0x6f, 0x9b, 0x3f, 0x39, 0x9a, 0x22, 0x14, 0x89, 0xf1, 0x63, 0x62, 0xc7, 0x03, 0x23, 0x36,
                0x09, 0xd4, 0x5a, 0xc6, 0x98, 0x64, 0xe3, 0x32, 0x1c, 0xf8, 0x29, 0x35, 0xac, 0x40, 0x96, 0xc8,
                0x6e, 0x13, 0x33, 0x14, 0xc5, 0x40, 0x19, 0xe8, 0xca, 0x79, 0x80, 0xdf, 0xa4, 0xb9, 0xcf, 0x1b,
                0x38, 0x4c, 0x48, 0x6f, 0x3a, 0x54, 0xc5, 0x10, 0x78, 0x15, 0x8e, 0xe5, 0xd7, 0x9d, 0xe5, 0x9f,
                0xbd, 0x34, 0xd8, 0x48, 0xb3, 0xd6, 0x95, 0x50, 0xa6, 0x76, 0x46, 0x34, 0x44, 0x27, 0xad, 0xe5,
                0x4b, 0x88, 0x51, 0xff, 0xb5, 0x98, 0xf7, 0xf8, 0x00, 0x74, 0xb9, 0x47, 0x3c, 0x82, 0xe2, 0xdb,
                0x65, 0x2c, 0x3f, 0xa3, 0x6b, 0x0a, 0x7c, 0x5b, 0x32, 0x19, 0xfa, 0xb3, 0xa3, 0x0b, 0xc1, 0xc4
            });

            // Test case 2
            _K.Add("AEAD_AES_192_CBC_HMAC_SHA_384", new byte[] {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f
            });

            _P.Add("AEAD_AES_192_CBC_HMAC_SHA_384", _P["AEAD_AES_128_CBC_HMAC_SHA_256"]);

            _IV.Add("AEAD_AES_192_CBC_HMAC_SHA_384", _IV["AEAD_AES_128_CBC_HMAC_SHA_256"]);

            _A.Add("AEAD_AES_192_CBC_HMAC_SHA_384", _A["AEAD_AES_128_CBC_HMAC_SHA_256"]);

            _C.Add("AEAD_AES_192_CBC_HMAC_SHA_384", new byte[] {
                0x1a, 0xf3, 0x8c, 0x2d, 0xc2, 0xb9, 0x6f, 0xfd, 0xd8, 0x66, 0x94, 0x09, 0x23, 0x41, 0xbc, 0x04,
                0xea, 0x65, 0xda, 0x6b, 0x59, 0xe6, 0x1e, 0xdb, 0x41, 0x9b, 0xe6, 0x2d, 0x19, 0x71, 0x2a, 0xe5,
                0xd3, 0x03, 0xee, 0xb5, 0x00, 0x52, 0xd0, 0xdf, 0xd6, 0x69, 0x7f, 0x77, 0x22, 0x4c, 0x8e, 0xdb,
                0x00, 0x0d, 0x27, 0x9b, 0xdc, 0x14, 0xc1, 0x07, 0x26, 0x54, 0xbd, 0x30, 0x94, 0x42, 0x30, 0xc6,
                0x57, 0xbe, 0xd4, 0xca, 0x0c, 0x9f, 0x4a, 0x84, 0x66, 0xf2, 0x2b, 0x22, 0x6d, 0x17, 0x46, 0x21,
                0x4b, 0xf8, 0xcf, 0xc2, 0x40, 0x0a, 0xdd, 0x9f, 0x51, 0x26, 0xe4, 0x79, 0x66, 0x3f, 0xc9, 0x0b,
                0x3b, 0xed, 0x78, 0x7a, 0x2f, 0x0f, 0xfc, 0xbf, 0x39, 0x04, 0xbe, 0x2a, 0x64, 0x1d, 0x5c, 0x21,
                0x05, 0xbf, 0xe5, 0x91, 0xba, 0xe2, 0x3b, 0x1d, 0x74, 0x49, 0xe5, 0x32, 0xee, 0xf6, 0x0a, 0x9a,
                0xc8, 0xbb, 0x6c, 0x6b, 0x01, 0xd3, 0x5d, 0x49, 0x78, 0x7b, 0xcd, 0x57, 0xef, 0x48, 0x49, 0x27,
                0xf2, 0x80, 0xad, 0xc9, 0x1a, 0xc0, 0xc4, 0xe7, 0x9c, 0x7b, 0x11, 0xef, 0xc6, 0x00, 0x54, 0xe3,
                0x84, 0x90, 0xac, 0x0e, 0x58, 0x94, 0x9b, 0xfe, 0x51, 0x87, 0x5d, 0x73, 0x3f, 0x93, 0xac, 0x20,
                0x75, 0x16, 0x80, 0x39, 0xcc, 0xc7, 0x33, 0xd7
            });

            // Test case 3
            _K.Add("AEAD_AES_256_CBC_HMAC_SHA384", new byte[] {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37
            });

            _P.Add("AEAD_AES_256_CBC_HMAC_SHA384", _P["AEAD_AES_128_CBC_HMAC_SHA_256"]);

            _IV.Add("AEAD_AES_256_CBC_HMAC_SHA384", _IV["AEAD_AES_128_CBC_HMAC_SHA_256"]);

            _A.Add("AEAD_AES_256_CBC_HMAC_SHA384", _A["AEAD_AES_128_CBC_HMAC_SHA_256"]);

            _C.Add("AEAD_AES_256_CBC_HMAC_SHA384", new byte[] {
                0x1a, 0xf3, 0x8c, 0x2d, 0xc2, 0xb9, 0x6f, 0xfd, 0xd8, 0x66, 0x94, 0x09, 0x23, 0x41, 0xbc, 0x04,
                0x89, 0x31, 0x29, 0xb0, 0xf4, 0xee, 0x9e, 0xb1, 0x8d, 0x75, 0xed, 0xa6, 0xf2, 0xaa, 0xa9, 0xf3,
                0x60, 0x7c, 0x98, 0xc4, 0xba, 0x04, 0x44, 0xd3, 0x41, 0x62, 0x17, 0x0d, 0x89, 0x61, 0x88, 0x4e,
                0x58, 0xf2, 0x7d, 0x4a, 0x35, 0xa5, 0xe3, 0xe3, 0x23, 0x4a, 0xa9, 0x94, 0x04, 0xf3, 0x27, 0xf5,
                0xc2, 0xd7, 0x8e, 0x98, 0x6e, 0x57, 0x49, 0x85, 0x8b, 0x88, 0xbc, 0xdd, 0xc2, 0xba, 0x05, 0x21,
                0x8f, 0x19, 0x51, 0x12, 0xd6, 0xad, 0x48, 0xfa, 0x3b, 0x1e, 0x89, 0xaa, 0x7f, 0x20, 0xd5, 0x96,
                0x68, 0x2f, 0x10, 0xb3, 0x64, 0x8d, 0x3b, 0xb0, 0xc9, 0x83, 0xc3, 0x18, 0x5f, 0x59, 0xe3, 0x6d,
                0x28, 0xf6, 0x47, 0xc1, 0xc1, 0x39, 0x88, 0xde, 0x8e, 0xa0, 0xd8, 0x21, 0x19, 0x8c, 0x15, 0x09,
                0x77, 0xe2, 0x8c, 0xa7, 0x68, 0x08, 0x0b, 0xc7, 0x8c, 0x35, 0xfa, 0xed, 0x69, 0xd8, 0xc0, 0xb7,
                0xd9, 0xf5, 0x06, 0x23, 0x21, 0x98, 0xa4, 0x89, 0xa1, 0xa6, 0xae, 0x03, 0xa3, 0x19, 0xfb, 0x30,
                0xdd, 0x13, 0x1d, 0x05, 0xab, 0x34, 0x67, 0xdd, 0x05, 0x6f, 0x8e, 0x88, 0x2b, 0xad, 0x70, 0x63,
                0x7f, 0x1e, 0x9a, 0x54, 0x1d, 0x9c, 0x23, 0xe7
            });

            // Test case 4
            _K.Add("AEAD_AES_256_CBC_HMAC_SHA512", new byte[] {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f
            });

            _P.Add("AEAD_AES_256_CBC_HMAC_SHA512", _P["AEAD_AES_128_CBC_HMAC_SHA_256"]);

            _IV.Add("AEAD_AES_256_CBC_HMAC_SHA512", _IV["AEAD_AES_128_CBC_HMAC_SHA_256"]);

            _A.Add("AEAD_AES_256_CBC_HMAC_SHA512", _A["AEAD_AES_128_CBC_HMAC_SHA_256"]);

            _C.Add("AEAD_AES_256_CBC_HMAC_SHA512", new byte[] {
                0x1a, 0xf3, 0x8c, 0x2d, 0xc2, 0xb9, 0x6f, 0xfd, 0xd8, 0x66, 0x94, 0x09, 0x23, 0x41, 0xbc, 0x04,
                0x4a, 0xff, 0xaa, 0xad, 0xb7, 0x8c, 0x31, 0xc5, 0xda, 0x4b, 0x1b, 0x59, 0x0d, 0x10, 0xff, 0xbd,
                0x3d, 0xd8, 0xd5, 0xd3, 0x02, 0x42, 0x35, 0x26, 0x91, 0x2d, 0xa0, 0x37, 0xec, 0xbc, 0xc7, 0xbd,
                0x82, 0x2c, 0x30, 0x1d, 0xd6, 0x7c, 0x37, 0x3b, 0xcc, 0xb5, 0x84, 0xad, 0x3e, 0x92, 0x79, 0xc2,
                0xe6, 0xd1, 0x2a, 0x13, 0x74, 0xb7, 0x7f, 0x07, 0x75, 0x53, 0xdf, 0x82, 0x94, 0x10, 0x44, 0x6b,
                0x36, 0xeb, 0xd9, 0x70, 0x66, 0x29, 0x6a, 0xe6, 0x42, 0x7e, 0xa7, 0x5c, 0x2e, 0x08, 0x46, 0xa1,
                0x1a, 0x09, 0xcc, 0xf5, 0x37, 0x0d, 0xc8, 0x0b, 0xfe, 0xcb, 0xad, 0x28, 0xc7, 0x3f, 0x09, 0xb3,
                0xa3, 0xb7, 0x5e, 0x66, 0x2a, 0x25, 0x94, 0x41, 0x0a, 0xe4, 0x96, 0xb2, 0xe2, 0xe6, 0x60, 0x9e,
                0x31, 0xe6, 0xe0, 0x2c, 0xc8, 0x37, 0xf0, 0x53, 0xd2, 0x1f, 0x37, 0xff, 0x4f, 0x51, 0x95, 0x0b,
                0xbe, 0x26, 0x38, 0xd0, 0x9d, 0xd7, 0xa4, 0x93, 0x09, 0x30, 0x80, 0x6d, 0x07, 0x03, 0xb1, 0xf6,
                0x4d, 0xd3, 0xb4, 0xc0, 0x88, 0xa7, 0xf4, 0x5c, 0x21, 0x68, 0x39, 0x64, 0x5b, 0x20, 0x12, 0xbf,
                0x2e, 0x62, 0x69, 0xa8, 0xc5, 0x6a, 0x81, 0x6d, 0xbc, 0x1b, 0x26, 0x77, 0x61, 0x95, 0x5b, 0xc5
            });

            _additionalData = new byte[] {
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
                0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
                0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f
            };
        }

        [TestMethod]
        public void RfcTestCaseAeadAes128CbcHmacSha256()
        {
            GeneralRfcTestCase("AEAD_AES_128_CBC_HMAC_SHA_256", AeadAesCbcSha2.Algorithm.AEAD_AES_128_CBC_HMAC_SHA_256);
        }

        [TestMethod]
        public void RfcTestCaseAeadAes192CbcHmacSha384()
        {
            GeneralRfcTestCase("AEAD_AES_192_CBC_HMAC_SHA_384", AeadAesCbcSha2.Algorithm.AEAD_AES_192_CBC_HMAC_SHA_384);
        }

        [TestMethod]
        public void RfcTestCaseAeadAes256CbcHmacSha384()
        {
            GeneralRfcTestCase("AEAD_AES_256_CBC_HMAC_SHA384", AeadAesCbcSha2.Algorithm.AEAD_AES_256_CBC_HMAC_SHA_384);
        }

        [TestMethod]
        public void RfcTestCaseAeadAes256CbcHmacSha512()
        {
            GeneralRfcTestCase("AEAD_AES_256_CBC_HMAC_SHA512", AeadAesCbcSha2.Algorithm.AEAD_AES_256_CBC_HMAC_SHA_512);
        }

        [TestMethod]
        public void BufferSizeTestMinBlock()
        {
            AeadAes.AeadAesCbcSha2.BlocksToReadFromStream = 1;

            GeneralRfcTestCase("AEAD_AES_128_CBC_HMAC_SHA_256", AeadAesCbcSha2.Algorithm.AEAD_AES_128_CBC_HMAC_SHA_256);
            GeneralRfcTestCase("AEAD_AES_192_CBC_HMAC_SHA_384", AeadAesCbcSha2.Algorithm.AEAD_AES_192_CBC_HMAC_SHA_384);
            GeneralRfcTestCase("AEAD_AES_256_CBC_HMAC_SHA384", AeadAesCbcSha2.Algorithm.AEAD_AES_256_CBC_HMAC_SHA_384);
            GeneralRfcTestCase("AEAD_AES_256_CBC_HMAC_SHA512", AeadAesCbcSha2.Algorithm.AEAD_AES_256_CBC_HMAC_SHA_512);

            AeadAes.AeadAesCbcSha2.BlocksToReadFromStream = 8;
        }

        [TestMethod]
        public void BufferSizeTestLargeBlock()
        {
            AeadAes.AeadAesCbcSha2.BlocksToReadFromStream = 1024;

            GeneralRfcTestCase("AEAD_AES_128_CBC_HMAC_SHA_256", AeadAesCbcSha2.Algorithm.AEAD_AES_128_CBC_HMAC_SHA_256);
            GeneralRfcTestCase("AEAD_AES_192_CBC_HMAC_SHA_384", AeadAesCbcSha2.Algorithm.AEAD_AES_192_CBC_HMAC_SHA_384);
            GeneralRfcTestCase("AEAD_AES_256_CBC_HMAC_SHA384", AeadAesCbcSha2.Algorithm.AEAD_AES_256_CBC_HMAC_SHA_384);
            GeneralRfcTestCase("AEAD_AES_256_CBC_HMAC_SHA512", AeadAesCbcSha2.Algorithm.AEAD_AES_256_CBC_HMAC_SHA_512);

            AeadAes.AeadAesCbcSha2.BlocksToReadFromStream = 8;
        }

        [TestMethod]
        public void MultipleThreads()
        {
            var t1 = new Task(() => GeneralRfcTestCase("AEAD_AES_128_CBC_HMAC_SHA_256", AeadAesCbcSha2.Algorithm.AEAD_AES_128_CBC_HMAC_SHA_256));
            var t2 = new Task(() => GeneralRfcTestCase("AEAD_AES_192_CBC_HMAC_SHA_384", AeadAesCbcSha2.Algorithm.AEAD_AES_192_CBC_HMAC_SHA_384));
            var t3 = new Task(() => GeneralRfcTestCase("AEAD_AES_256_CBC_HMAC_SHA384", AeadAesCbcSha2.Algorithm.AEAD_AES_256_CBC_HMAC_SHA_384));
            var t4 = new Task(() => GeneralRfcTestCase("AEAD_AES_256_CBC_HMAC_SHA512", AeadAesCbcSha2.Algorithm.AEAD_AES_256_CBC_HMAC_SHA_512));

            t1.Start();
            t2.Start();
            t3.Start();
            t4.Start();

            t1.Wait();
            t2.Wait();
            t3.Wait();
            t4.Wait();
        }

        [TestMethod]
        public void EncryptAdditionalDataInTheStream()
        {
            string testCase = "AEAD_AES_128_CBC_HMAC_SHA_256";
            AeadAesCbcSha2.Algorithm algol = AeadAesCbcSha2.Algorithm.AEAD_AES_128_CBC_HMAC_SHA_256;

            using MemoryStream inStream = new MemoryStream();
            inStream.Write(_additionalData, 0, _additionalData.Length);
            inStream.Write(_P[testCase], 0, _P[testCase].Length);
            inStream.Position = _additionalData.Length;
            using MemoryStream outStream = new MemoryStream();

            AeadAesCbcSha2.EncryptStream(inStream, outStream,
                algol,
                _K[testCase],
                _IV[testCase],
                _A[testCase]);

            byte[] output = outStream.ToArray();

            Assert.AreEqual(output.Length, _C[testCase].Length);
            Assert.AreEqual(output.SequenceEqual(_C[testCase]), true,
                    string.Format("Encrypted blob does not match for algorithm {0}.", testCase));

            MemoryStream input2 = new MemoryStream(_C[testCase]);
            MemoryStream outStream2 = new MemoryStream();
            AeadAesCbcSha2.DecryptStream(input2, outStream2,
                algol,
                _K[testCase],
                _A[testCase]);

            byte[] output2 = outStream2.ToArray();

            Assert.AreEqual(output2.Length, _P[testCase].Length);
            Assert.AreEqual(output2.SequenceEqual(_P[testCase]), true,
                string.Format("Decrypted blob does not match for algorithm {0}.", testCase));
        }

        [TestMethod]
        public void DecryptAdditionalDataInTheStream()
        {
            string testCase = "AEAD_AES_128_CBC_HMAC_SHA_256";
            AeadAesCbcSha2.Algorithm algol = AeadAesCbcSha2.Algorithm.AEAD_AES_128_CBC_HMAC_SHA_256;

            MemoryStream input2 = new MemoryStream(_C[testCase]);
            MemoryStream outStream2 = new MemoryStream();
            outStream2.Write(_additionalData, 0, _additionalData.Length);

            AeadAesCbcSha2.DecryptStream(input2, outStream2,
                algol,
                _K[testCase],
                _A[testCase]);

            byte[] output2 = outStream2.ToArray();

            Assert.AreEqual(output2.Length, _P[testCase].Length + _additionalData.Length);

            for(int i = 0; i< _additionalData.Length; i++)
            {
                Assert.AreEqual(output2[i], _additionalData[i],
                    string.Format("Decrypted blob does not match for algorithm {0} on index {1}.", testCase, i));
            }

            for (int i = 0; i < _P[testCase].Length; i++)
            {
                Assert.AreEqual(output2[_additionalData.Length + i], _P[testCase][i],
                    string.Format("Decrypted blob does not match for algorithm {0} on index {1}.", testCase, i));
            }
        }

        private void GeneralRfcTestCase(string testCase, AeadAesCbcSha2.Algorithm algol)
        {
            using MemoryStream inStream = new MemoryStream(_P[testCase]);
            using MemoryStream outStream = new MemoryStream();

            AeadAesCbcSha2.EncryptStream(inStream, outStream, 
                algol,
                _K[testCase], 
                _IV[testCase], 
                _A[testCase]);

            byte[] output = outStream.ToArray();

            Assert.AreEqual(output.Length, _C[testCase].Length);
            Assert.AreEqual(output.SequenceEqual(_C[testCase]), true, 
                    string.Format("Encrypted blob does not match for algorithm {0}.", testCase));

            MemoryStream input2 = new MemoryStream(_C[testCase]);
            MemoryStream outStream2 = new MemoryStream();
            AeadAesCbcSha2.DecryptStream(input2, outStream2, 
                algol,
                _K[testCase],
                _A[testCase]);

            byte[] output2 = outStream2.ToArray();

            Assert.AreEqual(output2.Length, _P[testCase].Length);
            Assert.AreEqual(output2.SequenceEqual(_P[testCase]), true, 
                string.Format("Decrypted blob does not match for algorithm {0}.", testCase));
        }
    }
}
